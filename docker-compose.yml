services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: charhub
      POSTGRES_PASSWORD: charhub_dev_password
      POSTGRES_DB: charhub_db
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    expose:
      - "5432"
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U charhub -d charhub_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-net

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    expose:
      - "6379"
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-net

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        NODE_ENV: ${NODE_ENV:-production}
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - ENABLE_HOT_RELOAD=${BACKEND_ENABLE_HOT_RELOAD:-false}
      - CHOKIDAR_USEPOLLING=${BACKEND_ENABLE_HOT_RELOAD:-false}
      - CHOKIDAR_INTERVAL=${BACKEND_HOT_RELOAD_POLL_INTERVAL:-700}
    env_file:
      - ./backend/.env
    volumes:
      # Mount translations for persistence (dev: auto-generated, prod: committed)
      - type: bind
        source: ./backend/translations
        target: /app/translations
      # Mount source code for hot-reload (only used in development)
      - type: bind
        source: ./backend/src
        target: /app/src
      # Mount TypeScript config (needed by ts-node-dev)
      - type: bind
        source: ./backend/tsconfig.json
        target: /app/tsconfig.json
      # Mount Prisma schema and migrations (needed for development)
      - type: bind
        source: ./backend/prisma
        target: /app/prisma
      # Preserve node_modules from container (don't overwrite with host)
      - /app/node_modules
    expose:
      - "3000"
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1:3000/api/v1/health"]
      interval: 30s
      timeout: 10s
      start_period: 40s
      retries: 3
    networks:
      - app-net

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: ${NODE_ENV:-production}
      args:
        NODE_ENV: ${NODE_ENV:-production}
    env_file:
      - ./frontend/.env
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - CHOKIDAR_USEPOLLING=true
      - CHOKIDAR_INTERVAL=500
    volumes:
      # Mount source code for hot-reload (only used in development)
      - type: bind
        source: ./frontend/src
        target: /app/src
      - type: bind
        source: ./frontend/index.html
        target: /app/index.html
      - type: bind
        source: ./frontend/vite.config.ts
        target: /app/vite.config.ts
      - type: bind
        source: ./frontend/tsconfig.json
        target: /app/tsconfig.json
      - type: bind
        source: ./frontend/.env
        target: /app/.env
      # Preserve node_modules from container
      - /app/node_modules
    ports:
      # Map Vite HMR port directly (bypasses nginx for WebSocket)
      - "5173:80"
    expose:
      - "80"
    restart: unless-stopped
    depends_on:
      - backend
    networks:
      - app-net

  nginx:
    image: nginx:alpine
    depends_on:
      - backend
      - frontend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/certs:/etc/nginx/certs:ro
    restart: unless-stopped
    networks:
      - app-net

  cloudflared:
    image: cloudflare/cloudflared:latest
    command: tunnel --config /etc/cloudflared/config/${ENV_SUFFIX:-dev}/config.yml run
    volumes:
      - ./cloudflared/config:/etc/cloudflared/config:ro
    depends_on:
      - nginx
    restart: unless-stopped
    networks:
      - app-net

networks:
  app-net:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
